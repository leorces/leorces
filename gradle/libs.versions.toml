[versions]
# Core Spring Framework
spring-boot = "3.5.4"
spring-dependency-management = "1.1.7"

# Testing
testcontainers = "1.19.3"

# Code Generation & Annotations
mapstruct = "1.6.3"

# Documentation
springdoc-openapi = "2.8.9"

# Resilience4j
resilience4j = "2.2.0"

# Utilities
commons-lang3 = "3.18.0"

[libraries]
# Spring Boot Core
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-logging = { module = "org.springframework.boot:spring-boot-starter-logging" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-autoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }

# Spring Data & Database
spring-boot-starter-data-jdbc = { module = "org.springframework.boot:spring-boot-starter-data-jdbc" }
liquibase-core = { module = "org.liquibase:liquibase-core" }
postgresql = { module = "org.postgresql:postgresql" }

# API Documentation
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc-openapi" }

# Resilience4j
resilience4j-spring-boot = { module = "io.github.resilience4j:resilience4j-spring-boot3", version.ref = "resilience4j" }
resilience4j-all = { module = "io.github.resilience4j:resilience4j-all", version.ref = "resilience4j" }

# JSON Processing
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
jackson-dataformat-xml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml" }

# Testing Framework
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }

# Integration Testing
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

# Development Tools
lombok = { module = "org.projectlombok:lombok" }
mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }

# Utilities
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang3" }

# Monitoring & Metrics
micrometer-core = { module = "io.micrometer:micrometer-core" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }

[plugins]
java = { id = "java-library" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }

[bundles]
# JSON processing
jackson = [
    "jackson-databind",
    "jackson-datatype-jsr310",
    "jackson-dataformat-xml"
]

resilience4j = [
    "resilience4j-spring-boot",
    "resilience4j-all"
]

# Unit testing
testing = [
    "spring-boot-starter-test",
    "junit-platform-launcher"
]

# Complete testing stack
testing-full = [
    "spring-boot-starter-test",
    "junit-platform-launcher",
    "testcontainers-junit-jupiter",
    "testcontainers-postgresql"
]